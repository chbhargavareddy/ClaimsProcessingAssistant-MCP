import { createServer, StdioTransport } from "@fastmcp/sdk"; import { z } from "zod"; import { supabase } from "./config/supabase"; import { Claim } from "./types/claim"; const server = createServer({ transport: new StdioTransport(), functions: { readClaims: { description: "Read claims from the database with optional filtering", parameters: z.object({ status: z.enum(["pending", "approved", "rejected"]).optional(), limit: z.number().min(1).max(100).optional(), offset: z.number().min(0).optional() }), handler: async ({ status, limit = 10, offset = 0 }) => { const query = supabase.from("claims").select("*"); if (status) { query.eq("status", status); } const { data, error } = await query.range(offset, offset + limit - 1); if (error) throw error; return data; } }, createClaim: { description: "Create a new claim record in the database", parameters: z.object({ policy_number: z.string(), claimant_name: z.string(), claim_type: z.string(), claim_amount: z.number(), status: z.enum(["pending", "approved", "rejected"]).default("pending") }), handler: async (claim) => { const { data, error } = await supabase.from("claims").insert([claim]).select(); if (error) throw error; return data[0]; } }, updateClaim: { description: "Update an existing claim record", parameters: z.object({ id: z.string(), updates: z.object({ status: z.enum(["pending", "approved", "rejected"]).optional(), claim_amount: z.number().optional() }) }), handler: async ({ id, updates }) => { const { data, error } = await supabase.from("claims").update(updates).eq("id", id).select(); if (error) throw error; return data[0]; } }, deleteClaim: { description: "Delete a claim record from the database", parameters: z.object({ id: z.string() }), handler: async ({ id }) => { const { error } = await supabase.from("claims").delete().eq("id", id); if (error) throw error; return { success: true }; } } } }); server.listen();
